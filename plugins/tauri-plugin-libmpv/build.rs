use std::env;
use std::fs::File;
use std::io::{Read, Write};
use std::path::PathBuf;

mod mpv_properties {
    include!("src/properties.rs");
}

fn main() {
    tauri_plugin::Builder::new(&[
        "init",
        "destroy",
        "command",
        "set_property",
        "get_property",
        "set_video_margin_ratio",
    ])
    .android_path("android")
    .ios_path("ios")
    .build();

    let generated_types =
        "/**\n * This file is generated by build.rs. Do not edit manually.\n */\n".to_string();

    let mut ts_interface = "export interface MpvPropertyTypes {\n".to_string();

    let all_prop_groups = [
        (mpv_properties::FLAG_PROPERTIES, "boolean"),
        (mpv_properties::INT64_PROPERTIES, "number"),
        (mpv_properties::DOUBLE_PROPERTIES, "number"),
        (mpv_properties::STRING_PROPERTIES, "string"),
        (mpv_properties::JSON_PROPERTIES, "unknown"),
    ];

    for (prop_list, default_ts_type) in all_prop_groups {
        for &prop_with_marker in prop_list {
            let (prop_name, is_optional) = if let Some(name) = prop_with_marker.strip_suffix('?') {
                (name, true)
            } else {
                (prop_with_marker, false)
            };

            let type_str = if is_optional {
                format!("{} | null", default_ts_type)
            } else {
                default_ts_type.to_string()
            };

            ts_interface.push_str(&format!("  '{}': {};\n", prop_name, type_str));
        }
    }

    ts_interface.push_str("}\n");

    let final_content = format!("{}{}", generated_types, ts_interface);
    let path = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap())
        .join("guest-js/generated/mpv-properties.ts");

    if let Some(parent) = path.parent() {
        if !parent.exists() {
            std::fs::create_dir_all(parent).expect("Failed to create directory");
        }
    }
    let mut current_content = String::new();
    if path.exists() {
        File::open(&path)
            .and_then(|mut f| f.read_to_string(&mut current_content))
            .unwrap_or(0);
    }
    if current_content != final_content {
        let mut file = File::create(&path).expect("Failed to create ts file");
        file.write_all(final_content.as_bytes())
            .expect("Failed to write to ts file");
        println!("âœ… Generated TypeScript types at: {:?}", path);
    }

    println!("cargo:rerun-if-changed=src/properties.rs");
    println!("cargo:rerun-if-changed=src/shared_types.rs");
    println!("cargo:rerun-if-changed=build.rs");
}
